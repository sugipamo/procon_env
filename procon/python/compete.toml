# Path to the test file (Liquid template)
#
# Variables:
#
# - `manifest_dir`: Package directory
# - `contest`:      Contest ID (e.g. "abc100")
# - `bin_name`:     Name of a `bin` target (e.g. "abc100-a")
# - `bin_alias`:    "Alias" for a `bin` target defined in `pacakge.metadata.cargo-compete` (e.g. "a")
# - `problem`:      Alias for `bin_alias` (deprecated)
#
# Additional filters:
#
# - `kebabcase`: Convert to kebab case (by using the `heck` crate)
test-suite = "{{ manifest_dir }}/testcases/{{ bin_alias }}.yml"

# Open files with the command (`jq` command that outputs `string[] | string[][]`)
#
# VSCode:
#open = '[["code", "-a", .manifest_dir], ["code"] + (.paths | map([.src, .test_suite]) | flatten)]'
# Emacs:
#open = '["emacsclient", "-n"] + (.paths | map([.src, .test_suite]) | flatten)'

[template]
src = '''
use std::env;
use std::io::{self, Write};
use std::io::{BufRead, BufReader};
use std::path::{Path, PathBuf};
use std::process::{Child, Command, Stdio};
use std::sync::{Arc, Mutex};

struct PythonProcess {
    child: Option<Child>,
}

impl Drop for PythonProcess {
    fn drop(&mut self) {
        if let Some(mut child) = self.child.take() {
            let _ = child.kill();
            let _ = child.wait();
        }
    }
}

fn get_python_script_path() -> Result<PathBuf, Box<dyn std::error::Error>> {
    let current_file_path = env::current_exe()?;
    let parent_dir = current_file_path
        .parent()
        .and_then(|p| p.parent())
        .and_then(|p| p.parent())
        .ok_or("Failed to get parent directory")?;

    let file_name = current_file_path
        .file_stem()
        .and_then(|s| s.to_str())
        .ok_or("Failed to get file stem")?;

    // Extract the problem part from the file name and construct the new path
    let parts: Vec<&str> = file_name.split('-').collect();
    if parts.len() < 2 {
        return Err("Invalid file name format".into());
    }

    let problem_dir = parts[0];
    let problem_file = parts[1];

    let script_path = parent_dir
        .join("python")
        .join(problem_dir)
        .join("src")
        .join(format!("{}.py", problem_file));
    Ok(script_path)
}

fn start_python_process(path: &Path) -> Result<Child, Box<dyn std::error::Error>> {
    let child = Command::new("pypy3")
        .arg(path)
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()?;
    Ok(child)
}

fn handle_stdin_to_child(child_stdin: &mut dyn Write) -> Result<(), Box<dyn std::error::Error>> {
    let stdin = io::stdin();
    for line in stdin.lock().lines() {
        let line = line?;
        writeln!(child_stdin, "{}", line)?;
        child_stdin.flush()?;
    }
    Ok(())
}

fn handle_child_stdout(child_stdout: impl BufRead) -> Result<(), Box<dyn std::error::Error>> {
    for line in child_stdout.lines() {
        let line = line?;
        println!("{}", line);
    }
    Ok(())
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let python_process = Arc::new(Mutex::new(PythonProcess { child: None }));

    let script_path = get_python_script_path()?;
    let child = start_python_process(&script_path)?;

    {
        let mut process = python_process.lock().unwrap();
        process.child = Some(child);
    }

    if let Some(ref mut stdin) = python_process.lock().unwrap().child.as_mut().unwrap().stdin {
        handle_stdin_to_child(stdin)?;
    }

    if let Some(stdout) = python_process
        .lock()
        .unwrap()
        .child
        .as_mut()
        .unwrap()
        .stdout
        .take()
    {
        handle_child_stdout(BufReader::new(stdout))?;
    }

    let status = python_process
        .lock()
        .unwrap()
        .child
        .as_mut()
        .unwrap()
        .wait()?;
    eprintln!("Python process exited with: {:?}", status);

    Ok(())
}
'''

[template.new]
# `edition` for `Cargo.toml`.
edition = "2018"
# `profile` for `Cargo.toml`.
#
# By setting this, you can run tests with `opt-level=3` while enabling `debug-assertions` and `overflow-checks`.
#profile = '''
#[dev]
#opt-level = 3
#'''
dependencies = '''
num = "=0.2.1"
num-bigint = "=0.2.6"
num-complex = "=0.2.4"
num-integer = "=0.1.42"
num-iter = "=0.1.40"
num-rational = "=0.2.4"
num-traits = "=0.2.11"
num-derive = "=0.3.0"
ndarray = "=0.13.0"
nalgebra = "=0.20.0"
alga = "=0.9.3"
libm = "=0.2.1"
rand = { version = "=0.7.3", features = ["small_rng"] }
getrandom = "=0.1.14"
rand_chacha = "=0.2.2"
rand_core = "=0.5.1"
rand_hc = "=0.2.0"
rand_pcg = "=0.2.1"
rand_distr = "=0.2.2"
petgraph = "=0.5.0"
indexmap = "=1.3.2"
regex = "=1.3.6"
lazy_static = "=1.4.0"
ordered-float = "=1.0.2"
ascii = "=1.0.0"
permutohedron = "=0.2.4"
superslice = "=1.0.0"
itertools = "=0.9.0"
itertools-num = "=0.1.3"
maplit = "=1.0.2"
either = "=1.5.3"
im-rc = "=14.3.0"
fixedbitset = "=0.2.0"
bitset-fixed = "=0.1.0"
proconio = { version = "=0.3.6", features = ["derive"] }
text_io = "=0.1.8"
whiteread = "=0.5.0"
rustc-hash = "=1.1.0"
smallvec = "=1.2.0"
ctrlc = "3.3.0"
'''
dev-dependencies = '''
#atcoder-202004-lock = { git = "https://github.com/qryxip/atcoder-202004-lock" }
'''

[template.new.copy-files]
"./template-cargo-lock.toml" = "Cargo.lock"

[new]
kind = "cargo-compete"
# Platform
#
# - atcoder
# - codeforces
# - yukicoder
platform = "atcoder"
# Path (Liquid template)
#
# Variables:
#
# - `contest`:      Contest ID. **May be nil**
# - `package_name`: Package name
path = "./{{ contest }}"

#[new]
#kind = "oj-api"
#url = "https://atcoder.jp/contests/{{ id }}"
#path = "./{{ contest }}"

# for Library-Checker
#[add]
#url = "https://judge.yosupo.jp/problem/{{ args[0] }}"
##is-contest = ["false"] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{{ args[0] }}'
##bin-alias = '{{ args[0] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.py' # optional

# for yukicoder
#[add]
#url = '{% case args[0] %}{% when "contest" %}https://yukicoder.me/contests/{{ args[1] }}{% when "problem" %}https://yukicoder.me/problems/no/{{ args[1] }}{% endcase %}'
#is-contest = ["bash", "-c", '[[ $(cut -d / -f 4) == "contests" ]]'] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{% assign segments = url | split: "/" %}{{ segments[5] }}'
##bin-alias = '{% assign segments = url | split: "/" %}{{ segments[5] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

[test]
# Toolchain for the test. (optional)
toolchain = "1.70.0"
# Profile for `cargo build`. ("dev" | "release")
#
# Defaults to `"dev"`.
profile = "dev"

#[submit]
#kind = "file"
#path = "{{ src_path }}"
#language_id = "4047"

#[submit]
#kind = "command"
#args = ["cargo", "equip", "--exclude-atcoder-crates", "--resolve-cfgs", "--remove", "docs", "--minify", "libs", "--rustfmt", "--check", "--bin", "{{ bin_name }}"]
#language_id = "4047"

[submit]
kind = "command"
args = ["python3", "./../submit.py", "{{ bin_name }}"]
#language_id = "4047"
language_id = "5078"
